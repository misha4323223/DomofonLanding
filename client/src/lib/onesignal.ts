declare global {
  interface Window {
    OneSignalDeferred?: Array<(OneSignal: any) => void>;
    OneSignal?: any;
  }
}

export interface OneSignalConfig {
  appId: string;
}

export class OneSignalService {
  private static instance: OneSignalService;

  private constructor() {}

  static getInstance(): OneSignalService {
    if (!OneSignalService.instance) {
      OneSignalService.instance = new OneSignalService();
    }
    return OneSignalService.instance;
  }

  private async getOneSignal(): Promise<any> {
    // –ï—Å–ª–∏ OneSignal —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
    if (window.OneSignal) {
      return window.OneSignal;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç - –∂–¥—ë–º —á–µ—Ä–µ–∑ Deferred
    return new Promise((resolve, reject) => {
      if (!window.OneSignalDeferred) {
        reject(new Error('OneSignal SDK –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –±—Ä–∞—É–∑–µ—Ä–æ–º.'));
        return;
      }

      window.OneSignalDeferred.push((OneSignal: any) => {
        resolve(OneSignal);
      });
    });
  }

  async requestPermission(): Promise<void> {
    try {
      const OneSignal = await this.getOneSignal();
      await OneSignal.Slidedown.promptPush();
    } catch (error) {
      throw error;
    }
  }

  async setExternalUserId(userId: string): Promise<void> {
    const OneSignal = await this.getOneSignal();
    await OneSignal.login(userId);
  }

  async addTag(key: string, value: string): Promise<void> {
    const OneSignal = await this.getOneSignal();
    await OneSignal.User.addTag(key, value);
  }

  async isPushSupported(): Promise<boolean> {
    try {
      const OneSignal = await this.getOneSignal();
      return await OneSignal.Notifications.isPushSupported();
    } catch {
      return false;
    }
  }

  async getPermissionState(): Promise<string> {
    try {
      const OneSignal = await this.getOneSignal();
      return await OneSignal.Notifications.permissionNative;
    } catch {
      return 'default';
    }
  }

  async getSubscriptionId(): Promise<string | null> {
    try {
      const OneSignal = await this.getOneSignal();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
      let subscriptionId = OneSignal.User.PushSubscription.id;
      
      console.log('üîç –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å Subscription ID:', subscriptionId);
      
      // –ï—Å–ª–∏ ID –µ—â–µ –Ω–µ—Ç - –∂–¥–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
      if (!subscriptionId) {
        console.log('‚è≥ ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –∂–¥–µ–º —Å–æ–±—ã—Ç–∏—è subscriptionChange...');
        
        subscriptionId = await new Promise<string | null>((resolve) => {
          let attempts = 0;
          const maxAttempts = 10;
          
          const checkId = () => {
            attempts++;
            const currentId = OneSignal.User.PushSubscription.id;
            
            console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts}, ID:`, currentId);
            
            if (currentId) {
              resolve(currentId);
            } else if (attempts >= maxAttempts) {
              console.warn('‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫');
              resolve(null);
            } else {
              setTimeout(checkId, 500); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 500–º—Å
            }
          };
          
          // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
          OneSignal.User.PushSubscription.addEventListener('change', (event: any) => {
            console.log('üì¢ –°–æ–±—ã—Ç–∏–µ subscriptionChange:', event);
            if (event.current?.id) {
              resolve(event.current.id);
            }
          });
          
          // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
          setTimeout(checkId, 500);
        });
      }
      
      console.log('‚úÖ OneSignal Subscription ID –ø–æ–ª—É—á–µ–Ω:', subscriptionId);
      return subscriptionId || null;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è OneSignal Subscription ID:', error);
      return null;
    }
  }
}

export const oneSignalService = OneSignalService.getInstance();
