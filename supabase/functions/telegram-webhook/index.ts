import { serve } from "https://deno.land/std@0.168.0/http/server.ts"
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

// Redeploy to reload TELEGRAM_SECRET_TOKEN: 2025-10-18
const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const TELEGRAM_SECRET_TOKEN = Deno.env.get('TELEGRAM_SECRET_TOKEN')!
const TELEGRAM_CHAT_ID = Deno.env.get('TELEGRAM_CHAT_ID')!
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
const SUPABASE_ANON_KEY = Deno.env.get('SUPABASE_ANON_KEY')!

interface TelegramUpdate {
  callback_query?: {
    id: string
    from: {
      id: number
      first_name: string
    }
    message?: {
      message_id: number
      chat: {
        id: number
      }
    }
    data: string
  }
}

interface Request {
  id: string
  created_at: string
  name: string
  phone: string
  city: string
  address: string
  apartment: string | null
  message: string | null
  onesignal_id: string | null
}

serve(async (req) => {
  try {
    console.log('üîî ===== WEBHOOK –ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù =====')
    console.log('üìÖ –í—Ä–µ–º—è:', new Date().toISOString())
    console.log('üåê –ú–µ—Ç–æ–¥:', req.method)
    console.log('üîó URL:', req.url)
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:')
    req.headers.forEach((value, key) => {
      console.log(`  ${key}: ${value}`)
    })
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—Ç Telegram
    const secretToken = req.headers.get('X-Telegram-Bot-Api-Secret-Token')
    console.log('üîë –¢–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞:', secretToken ? `${secretToken.substring(0, 10)}...` : '–û–¢–°–£–¢–°–¢–í–£–ï–¢')
    console.log('üîê –û–∂–∏–¥–∞–µ–º—ã–π —Ç–æ–∫–µ–Ω:', TELEGRAM_SECRET_TOKEN ? `${TELEGRAM_SECRET_TOKEN.substring(0, 10)}...` : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù')
    
    if (secretToken !== TELEGRAM_SECRET_TOKEN) {
      console.error('‚ùå –û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!')
      console.error('–ü–æ–ª—É—á–µ–Ω:', secretToken)
      console.error('–û–∂–∏–¥–∞–ª—Å—è:', TELEGRAM_SECRET_TOKEN)
      return new Response('Unauthorized', { status: 401 })
    }
    
    console.log('‚úÖ –¢–æ–∫–µ–Ω –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ')

    const update: TelegramUpdate = await req.json()
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ update:', JSON.stringify(update, null, 2))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ callback query
    if (!update.callback_query) {
      console.log('‚ö†Ô∏è –≠—Ç–æ –Ω–µ callback query, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
      return new Response('OK', { status: 200 })
    }

    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω callback query')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback –ø—Ä–∏—à–µ–ª –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —á–∞—Ç–∞
    const chatId = update.callback_query.message?.chat.id
    console.log('üè† Chat ID –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è:', chatId)
    console.log('üè† –û–∂–∏–¥–∞–µ–º—ã–π Chat ID:', TELEGRAM_CHAT_ID)
    
    if (chatId && chatId.toString() !== TELEGRAM_CHAT_ID) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π chat_id:', chatId, '–æ–∂–∏–¥–∞–ª—Å—è:', TELEGRAM_CHAT_ID)
      return new Response('OK', { status: 200 })
    }

    const { callback_query } = update
    const callbackData = callback_query.data
    console.log('üì± Callback data:', callbackData)

    // –ü–∞—Ä—Å–∏–º callback_data: —Ñ–æ—Ä–º–∞—Ç "notify:request_id:status"
    if (!callbackData.startsWith('notify:')) {
      console.log('‚ö†Ô∏è Callback data –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "notify:", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º')
      return new Response('OK', { status: 200 })
    }

    const parts = callbackData.split(':')
    if (parts.length !== 3) {
      console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data:', callbackData)
      return new Response('OK', { status: 200 })
    }

    const [, requestId, status] = parts
    console.log('üÜî Request ID:', requestId)
    console.log('üìä –°—Ç–∞—Ç—É—Å:', status)

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Supabase —Å service role –∫–ª—é—á–æ–º –¥–ª—è –æ–±—Ö–æ–¥–∞ RLS
    console.log('üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase...')
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY)

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã
    console.log('üîç –ò—â–µ–º –∑–∞—è–≤–∫—É —Å ID:', requestId)
    const { data: request, error } = await supabase
      .from('requests')
      .select('*')
      .eq('id', requestId)
      .single<Request>()

    if (error || !request) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞—è–≤–∫–∏:', error)
      await answerCallbackQuery(callback_query.id, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return new Response('OK', { status: 200 })
    }

    console.log('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–∞:', request.name)
    console.log('üì± OneSignal ID:', request.onesignal_id)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ OneSignal ID
    if (!request.onesignal_id) {
      console.log('‚ö†Ô∏è –£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç OneSignal ID:', requestId)
      await answerCallbackQuery(callback_query.id, '‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
      return new Response('OK', { status: 200 })
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    let heading = ""
    let message = ""
    const name = request.name || "–ö–ª–∏–µ–Ω—Ç"
    const address = request.address || "—É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å"

    switch (status) {
      case "processing":
        heading = "–ó–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        message = `${name}, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`
        break
      case "departed":
        heading = "–ú–∞—Å—Ç–µ—Ä –≤—ã–µ—Ö–∞–ª"
        message = `${name}, –º–∞—Å—Ç–µ—Ä –≤—ã–µ—Ö–∞–ª –∫ –≤–∞–º –ø–æ –∞–¥—Ä–µ—Å—É: ${address}`
        break
      case "solved":
        heading = "–ü—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞"
        message = `${name}, —Ä–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ö–∞–∫ –≤–∞–º –Ω–∞—à–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ?`
        break
      default:
        await answerCallbackQuery(callback_query.id, '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')
        return new Response('OK', { status: 200 })
    }

    console.log('üì§ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:')
    console.log('  üÜî Request ID:', requestId)
    console.log('  üìä –°—Ç–∞—Ç—É—Å:', status)
    console.log('  üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫:', heading)
    console.log('  üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:', message)
    console.log('  üîî OneSignal ID:', request.onesignal_id)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à—É Edge Function
    console.log('üöÄ –í—ã–∑—ã–≤–∞–µ–º Edge Function onesignal-send-notification...')
    const notificationResponse = await fetch(
      `${SUPABASE_URL}/functions/v1/onesignal-send-notification`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "Authorization": `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
        },
        body: JSON.stringify({
          subscriberId: request.onesignal_id,
          heading: heading,
          message: message,
        }),
      }
    )

    console.log('üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç Edge Function:', notificationResponse.status)
    
    if (!notificationResponse.ok) {
      const errorData = await notificationResponse.json()
      console.error('‚ùå –û—à–∏–±–∫–∞ Edge Function:', JSON.stringify(errorData, null, 2))
      await answerCallbackQuery(callback_query.id, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
      return new Response('OK', { status: 200 })
    }

    const result = await notificationResponse.json()
    console.log('‚úÖ Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
    console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2))

    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
    console.log('üí¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback query...')
    await answerCallbackQuery(callback_query.id, `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "${heading}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${name}`)

    console.log('üéâ ===== WEBHOOK –û–ë–†–ê–ë–û–¢–ê–ù –£–°–ü–ï–®–ù–û =====')
    return new Response(
      JSON.stringify({ success: true }),
      { status: 200, headers: { 'Content-Type': 'application/json' } }
    )
  } catch (error) {
    console.error('üí• ===== –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê =====')
    console.error('‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏:', error.constructor.name)
    console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ:', error.message)
    console.error('‚ùå –°—Ç–µ–∫:', error.stack)
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    )
  }
})

async function answerCallbackQuery(callbackQueryId: string, text: string): Promise<void> {
  try {
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/answerCallbackQuery`
    await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text: text,
        show_alert: false,
      }),
    })
  } catch (error) {
    console.error('Error answering callback query:', error)
  }
}
